#! /usr/bin/env python

import rospy
import yaml
import sys

sys.path.append("/usr/lib/freecad-python3/lib")

import FreeCAD
import Import
import numpy as np

from tf.transformations import quaternion_from_matrix


def main():
    # Initialise node
    rospy.init_node("extract_cad_poses_node")

    transforms_file = rospy.get_param("~transforms_file")
    cad_file = rospy.get_param("~cad_file")
    output_yaml_file = rospy.get_param("~output_yaml_file")

    with open(transforms_file, "r") as file:
        transforms_dict = yaml.safe_load(file)
    rospy.loginfo("Reading CAD file...")
    Import.open(cad_file)
    doc = FreeCAD.ActiveDocument
    rospy.loginfo("Done!")
    object_poses = {}
    cad_to_obj_name_map = {}
    for object_name, output_config in transforms_dict.items():
        cad_to_obj_name_map[output_config["cad_input_name"]] = object_name

    for cad_obj in doc.Objects:
        cad_obj_name = cad_obj.Label
        if cad_obj_name not in cad_to_obj_name_map:
            continue
        cad_matrix = cad_obj.Placement.toMatrix()
        cad_matrix = np.array(cad_matrix.A).reshape((4, 4))
        cad_matrix[:3, 3] /= 1000  # Converting mm to m
        dict_name = cad_to_obj_name_map[cad_obj_name]

        q = quaternion_from_matrix(cad_matrix)
        object_poses[dict_name] = {
            "x": float(cad_matrix[0, 3]),
            "y": float(cad_matrix[1, 3]),
            "z": float(cad_matrix[2, 3]),
            "q_x": float(q[0]),
            "q_y": float(q[1]),
            "q_z": float(q[2]),
            "q_w": float(q[3]),
        }

    rospy.loginfo("Step file processed. Saving tf data...")
    with open(output_yaml_file, "w") as outfile:
        yaml.dump(object_poses, outfile, default_flow_style=False)


if __name__ == "__main__":
    main()
