#! /usr/bin/env python

import time
import rospy
import actionlib
from sensor_msgs.msg import JointState
from std_msgs.msg import Float64MultiArray
from ndx_manipulation.msg import GripperCommandAction, GripperCommandFeedback, GripperCommandResult
from ndx_manipulation.msg import RotaryGripperCommandAction, RotaryGripperCommandResult
from threading import Lock


class DematGripper(object):
    # create messages that are used to publish feedback/result
    _feedback = GripperCommandFeedback()
    _result = GripperCommandResult()
    _rotary_result = RotaryGripperCommandResult()

    def __init__(self, name):

        # Mutex for motor IO
        self.mutex = Lock()

        # Parameters
        self.rate_hz = rospy.get_param("~publish_rate")
        self.default_velocity = rospy.get_param("~default_velocity")
        self.default_effort = rospy.get_param("~default_effort")
        self.joint_names = rospy.get_param("~joint_names")
        self.max_aperture = rospy.get_param("~max_aperture")

        # Gripper variables
        self.aperture = 0

        # Initialise joint state subscriber
        self._js_sub = rospy.Subscriber('joint_states', JointState, self.joint_state_callback, queue_size=1)

        # Initialise gripper command publisher
        self._gripper_pub = rospy.Publisher('hand_controller/command', Float64MultiArray, queue_size=1)

        # Start action server
        self._parallel_action_name = name + '_parallel'
        self._parallel_as = actionlib.SimpleActionServer(self._parallel_action_name, GripperCommandAction,
                                                         execute_cb=self.gripper_callback, auto_start=False)
        self._parallel_as.start()
        self._rotary_action_name = name + '_rotary'
        self._rotary_as = actionlib.SimpleActionServer(self._rotary_action_name, RotaryGripperCommandAction,
                                                       execute_cb=self.rotary_callback, auto_start=False)
        self._rotary_as.start()

    def joint_state_callback(self, data):
        self.aperture = data.position[data.name.index(self.joint_names[0])] + data.position[data.name.index(self.joint_names[1])]

    def publish_gripper_command(self, aperture):
        msg = Float64MultiArray()
        msg.data = [aperture/2, aperture/2]
        self._gripper_pub.publish(msg)

    def gripper_callback(self, goal):
        # Variables
        max_time = 5.0
        rate = rospy.Rate(self.rate_hz)
        success = True
        reached_goal = False
        stalled = True

        # Bound requested aperture
        desired_aperture = goal.position
        if desired_aperture > self.max_aperture:
            desired_aperture = self.max_aperture
        if desired_aperture < 0:
            desired_aperture = 0

        # Print inputs
        rospy.loginfo("{}: Executing, setting gripper to aperture {}"
                      .format(self._parallel_action_name, desired_aperture))

        # Set goal aperture
        self.publish_gripper_command(desired_aperture)

        # Loop until at goal or preempted
        for i in range(int(max_time * self.rate_hz)):
            rate.sleep()

            # If at goal, break loop
            if abs(self.aperture - desired_aperture) < 0.003:
                stalled = False
                reached_goal = True
                break

            # Check that preempt has not been requested by the client
            if self._parallel_as.is_preempt_requested():
                rospy.loginfo("{}: Preempted".format(self._parallel_action_name))
                self._parallel_as.set_preempted()
                success = False
                break

            # Publish feedback
            self._feedback.position = self.aperture
            self._feedback.effort = 0
            self._feedback.reached_goal = reached_goal
            self._feedback.stalled = stalled
            self._parallel_as.publish_feedback(self._feedback)

        if success:
            # Set goal positions as they are
            self.publish_gripper_command(self.aperture)

            # Return result
            self._result.position = self.aperture
            self._result.effort = 0
            self._result.reached_goal = reached_goal
            self._result.stalled = stalled
            rospy.loginfo("{}: Succeeded".format(self._parallel_action_name))
            self._parallel_as.set_succeeded(self._result)

    def rotary_callback(self, goal):
        # Variables
        success = True
        reached_goal = False
        stalled = True

        # Process inputs
        wait_cycles = int(abs(goal.offset) / 100)

        # Print inputs
        rospy.loginfo("{}: Executing gripper motion type {}, with offset {} and effort {}"
                      .format(self._rotary_action_name, goal.type, goal.offset, goal.effort))

        # Program flow for each motion type
        if goal.type == 'close':
            # Engage clutch
            time.sleep(1.5)

            # Rotate until velocity drops
            for i in range(wait_cycles):
                time.sleep(0.1)
                if self._rotary_as.is_preempt_requested():
                    rospy.loginfo("{}: Preempted".format(self._rotary_action_name))
                    self._rotary_as.set_preempted()
                    success = False
                    break
            time.sleep(0.5)

            # Spike current to get tighter grip if not preempted
            if success:
                time.sleep(0.5)

            # Disengage clutch
            time.sleep(1.5)

        elif goal.type == 'open':
            # Engage clutch
            time.sleep(1.5)

            # Spike current to loosen grip
            time.sleep(0.75)

            # Open to desired offset
            for i in range(wait_cycles):
                time.sleep(0.1)
                if self._rotary_as.is_preempt_requested():
                    rospy.loginfo("{}: Preempted".format(self._rotary_action_name))
                    self._rotary_as.set_preempted()
                    success = False
                    break

            time.sleep(0.5)

            # Disengage clutch
            time.sleep(1)
        else:
            # Rotate until desired offset
            for i in range(wait_cycles):
                time.sleep(0.1)
                if self._rotary_as.is_preempt_requested():
                    rospy.loginfo("{}: Preempted".format(self._rotary_action_name))
                    self._rotary_as.set_preempted()
                    success = False
                    break
            time.sleep(0.5)

        if success:
            # Return result
            self._rotary_result.offset = goal.offset
            self._rotary_result.effort = 0
            self._rotary_result.reached_goal = reached_goal
            self._rotary_result.stalled = stalled
            rospy.loginfo("{}: Succeeded".format(self._rotary_action_name))
            self._rotary_as.set_succeeded(self._rotary_result)

    def run(self):
        rospy.spin()


if __name__ == '__main__':
    # Initialise node
    rospy.init_node('gripper')

    # Start server
    c = DematGripper(rospy.get_name())
    c.run()
