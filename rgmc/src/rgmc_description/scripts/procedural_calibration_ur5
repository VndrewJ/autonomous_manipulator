#!/usr/bin/env python

import rospy
import yaml
import quaternion
import numpy as np
from tf.transformations import euler_from_quaternion
from ndx_util.NdxArm import NdxArm
from std_srvs.srv import Trigger

if __name__ == "__main__":
    # Initialise node
    rospy.init_node("procedural_calibration", anonymous=False)

    add_waypoints = rospy.ServiceProxy(
        "/extrinsics_calib/collect_waypoints", Trigger
    )
    perform_calibration = rospy.ServiceProxy(
        "/extrinsics_calib/perform_calibration", Trigger
    )
    publish_calibration = rospy.ServiceProxy(
        "/extrinsics_calib/publish_calibration", Trigger
    )
    save_calibration = rospy.ServiceProxy(
        "/extrinsics_calib/save_calibration", Trigger
    )
    robot = "ur5e_B"
    move_group_name = f"{robot}_arm"
    tool_frame = f"{robot}_fingertip"
    planning_frame = "world"
    mock_calibration = False
    vel_scale = 0.5
    acc_scale = 0.5
    arm = NdxArm(
        move_group_name,
        tool_frame,
        planning_frame,
        velocity_scale=vel_scale,
        acc_scale=acc_scale,
        # planner="RRTstar",
        planner="RRTConnect",
        planning_time=5,
    )

    pose, _, _, _ = arm.get_tool_pose()
    for x in [-0.1, 0, 0.1]:
        if rospy.is_shutdown():
            break
        for y in [-0.1, 0, 0.1]:
            if rospy.is_shutdown():
                break
            for z in [-0.1, 0]:
                if rospy.is_shutdown():
                    break
                target_pose = pose.copy()
                target_pose[0, 3] += x
                target_pose[1, 3] += y
                target_pose[2, 3] += z
                arm.set_tool_pose(target_pose)
                arm.move_group.stop()
                # Give time for arm to settle
                rospy.sleep(0.5)
                if not mock_calibration:
                    add_waypoints()
    if not mock_calibration:
        perform_calibration()
        publish_calibration()
        save_calibration()
