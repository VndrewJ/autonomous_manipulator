// Auto-generated. Do not edit!

// (in-package ndx_manipulation.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class TFGCommandGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.grasp = null;
      this.finger_angle = null;
      this.is_deg = null;
      this.max_effort = null;
      this.velocity = null;
    }
    else {
      if (initObj.hasOwnProperty('grasp')) {
        this.grasp = initObj.grasp
      }
      else {
        this.grasp = 0.0;
      }
      if (initObj.hasOwnProperty('finger_angle')) {
        this.finger_angle = initObj.finger_angle
      }
      else {
        this.finger_angle = 0.0;
      }
      if (initObj.hasOwnProperty('is_deg')) {
        this.is_deg = initObj.is_deg
      }
      else {
        this.is_deg = false;
      }
      if (initObj.hasOwnProperty('max_effort')) {
        this.max_effort = initObj.max_effort
      }
      else {
        this.max_effort = 0.0;
      }
      if (initObj.hasOwnProperty('velocity')) {
        this.velocity = initObj.velocity
      }
      else {
        this.velocity = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type TFGCommandGoal
    // Serialize message field [grasp]
    bufferOffset = _serializer.float64(obj.grasp, buffer, bufferOffset);
    // Serialize message field [finger_angle]
    bufferOffset = _serializer.float64(obj.finger_angle, buffer, bufferOffset);
    // Serialize message field [is_deg]
    bufferOffset = _serializer.bool(obj.is_deg, buffer, bufferOffset);
    // Serialize message field [max_effort]
    bufferOffset = _serializer.float64(obj.max_effort, buffer, bufferOffset);
    // Serialize message field [velocity]
    bufferOffset = _serializer.float64(obj.velocity, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type TFGCommandGoal
    let len;
    let data = new TFGCommandGoal(null);
    // Deserialize message field [grasp]
    data.grasp = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [finger_angle]
    data.finger_angle = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [is_deg]
    data.is_deg = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [max_effort]
    data.max_effort = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [velocity]
    data.velocity = _deserializer.float64(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 33;
  }

  static datatype() {
    // Returns string type for a message object
    return 'ndx_manipulation/TFGCommandGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '007cdeef6577eba1ad468b75850b155c';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    float64 grasp           # Gripper open or close
    float64 finger_angle    # Angle between finger 2 and finger 3
    bool is_deg             # Specify if Angle is in degrees
    float64 max_effort      # Max motor current
    float64 velocity        # Motor velocity
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new TFGCommandGoal(null);
    if (msg.grasp !== undefined) {
      resolved.grasp = msg.grasp;
    }
    else {
      resolved.grasp = 0.0
    }

    if (msg.finger_angle !== undefined) {
      resolved.finger_angle = msg.finger_angle;
    }
    else {
      resolved.finger_angle = 0.0
    }

    if (msg.is_deg !== undefined) {
      resolved.is_deg = msg.is_deg;
    }
    else {
      resolved.is_deg = false
    }

    if (msg.max_effort !== undefined) {
      resolved.max_effort = msg.max_effort;
    }
    else {
      resolved.max_effort = 0.0
    }

    if (msg.velocity !== undefined) {
      resolved.velocity = msg.velocity;
    }
    else {
      resolved.velocity = 0.0
    }

    return resolved;
    }
};

module.exports = TFGCommandGoal;
