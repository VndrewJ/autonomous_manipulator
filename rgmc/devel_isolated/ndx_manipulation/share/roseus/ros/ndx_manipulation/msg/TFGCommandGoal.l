;; Auto-generated. Do not edit!


(when (boundp 'ndx_manipulation::TFGCommandGoal)
  (if (not (find-package "NDX_MANIPULATION"))
    (make-package "NDX_MANIPULATION"))
  (shadow 'TFGCommandGoal (find-package "NDX_MANIPULATION")))
(unless (find-package "NDX_MANIPULATION::TFGCOMMANDGOAL")
  (make-package "NDX_MANIPULATION::TFGCOMMANDGOAL"))

(in-package "ROS")
;;//! \htmlinclude TFGCommandGoal.msg.html


(defclass ndx_manipulation::TFGCommandGoal
  :super ros::object
  :slots (_grasp _finger_angle _is_deg _max_effort _velocity ))

(defmethod ndx_manipulation::TFGCommandGoal
  (:init
   (&key
    ((:grasp __grasp) 0.0)
    ((:finger_angle __finger_angle) 0.0)
    ((:is_deg __is_deg) nil)
    ((:max_effort __max_effort) 0.0)
    ((:velocity __velocity) 0.0)
    )
   (send-super :init)
   (setq _grasp (float __grasp))
   (setq _finger_angle (float __finger_angle))
   (setq _is_deg __is_deg)
   (setq _max_effort (float __max_effort))
   (setq _velocity (float __velocity))
   self)
  (:grasp
   (&optional __grasp)
   (if __grasp (setq _grasp __grasp)) _grasp)
  (:finger_angle
   (&optional __finger_angle)
   (if __finger_angle (setq _finger_angle __finger_angle)) _finger_angle)
  (:is_deg
   (&optional (__is_deg :null))
   (if (not (eq __is_deg :null)) (setq _is_deg __is_deg)) _is_deg)
  (:max_effort
   (&optional __max_effort)
   (if __max_effort (setq _max_effort __max_effort)) _max_effort)
  (:velocity
   (&optional __velocity)
   (if __velocity (setq _velocity __velocity)) _velocity)
  (:serialization-length
   ()
   (+
    ;; float64 _grasp
    8
    ;; float64 _finger_angle
    8
    ;; bool _is_deg
    1
    ;; float64 _max_effort
    8
    ;; float64 _velocity
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float64 _grasp
       (sys::poke _grasp (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _finger_angle
       (sys::poke _finger_angle (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; bool _is_deg
       (if _is_deg (write-byte -1 s) (write-byte 0 s))
     ;; float64 _max_effort
       (sys::poke _max_effort (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _velocity
       (sys::poke _velocity (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float64 _grasp
     (setq _grasp (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _finger_angle
     (setq _finger_angle (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; bool _is_deg
     (setq _is_deg (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; float64 _max_effort
     (setq _max_effort (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _velocity
     (setq _velocity (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get ndx_manipulation::TFGCommandGoal :md5sum-) "007cdeef6577eba1ad468b75850b155c")
(setf (get ndx_manipulation::TFGCommandGoal :datatype-) "ndx_manipulation/TFGCommandGoal")
(setf (get ndx_manipulation::TFGCommandGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
float64 grasp           # Gripper open or close
float64 finger_angle    # Angle between finger 2 and finger 3
bool is_deg             # Specify if Angle is in degrees
float64 max_effort      # Max motor current
float64 velocity        # Motor velocity

")



(provide :ndx_manipulation/TFGCommandGoal "007cdeef6577eba1ad468b75850b155c")


