# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rgmc_manipulation/NFSRequestRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NFSRequestRequest(genpy.Message):
  _md5sum = "997bfe360c8f01b6ee2fa25b83e9f4dd"
  _type = "rgmc_manipulation/NFSRequestRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 target_vel
float64 target_torque
bool set_motor_state
bool move
bool stop
bool clear_error
"""
  __slots__ = ['target_vel','target_torque','set_motor_state','move','stop','clear_error']
  _slot_types = ['float64','float64','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       target_vel,target_torque,set_motor_state,move,stop,clear_error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NFSRequestRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.target_vel is None:
        self.target_vel = 0.
      if self.target_torque is None:
        self.target_torque = 0.
      if self.set_motor_state is None:
        self.set_motor_state = False
      if self.move is None:
        self.move = False
      if self.stop is None:
        self.stop = False
      if self.clear_error is None:
        self.clear_error = False
    else:
      self.target_vel = 0.
      self.target_torque = 0.
      self.set_motor_state = False
      self.move = False
      self.stop = False
      self.clear_error = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d4B().pack(_x.target_vel, _x.target_torque, _x.set_motor_state, _x.move, _x.stop, _x.clear_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.target_vel, _x.target_torque, _x.set_motor_state, _x.move, _x.stop, _x.clear_error,) = _get_struct_2d4B().unpack(str[start:end])
      self.set_motor_state = bool(self.set_motor_state)
      self.move = bool(self.move)
      self.stop = bool(self.stop)
      self.clear_error = bool(self.clear_error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d4B().pack(_x.target_vel, _x.target_torque, _x.set_motor_state, _x.move, _x.stop, _x.clear_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.target_vel, _x.target_torque, _x.set_motor_state, _x.move, _x.stop, _x.clear_error,) = _get_struct_2d4B().unpack(str[start:end])
      self.set_motor_state = bool(self.set_motor_state)
      self.move = bool(self.move)
      self.stop = bool(self.stop)
      self.clear_error = bool(self.clear_error)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d4B = None
def _get_struct_2d4B():
    global _struct_2d4B
    if _struct_2d4B is None:
        _struct_2d4B = struct.Struct("<2d4B")
    return _struct_2d4B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rgmc_manipulation/NFSRequestResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NFSRequestResponse(genpy.Message):
  _md5sum = "eb13ac1f1354ccecb7941ee8fa2192e8"
  _type = "rgmc_manipulation/NFSRequestResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool result
"""
  __slots__ = ['result']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NFSRequestResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = False
    else:
      self.result = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.result,) = _get_struct_B().unpack(str[start:end])
      self.result = bool(self.result)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class NFSRequest(object):
  _type          = 'rgmc_manipulation/NFSRequest'
  _md5sum = '1297a10f19670677860ac0dedc54bb5d'
  _request_class  = NFSRequestRequest
  _response_class = NFSRequestResponse
