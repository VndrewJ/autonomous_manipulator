# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rgmc_manipulation/ParallelSpinPadsGripperCommandResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ParallelSpinPadsGripperCommandResult(genpy.Message):
  _md5sum = "e170c820e7fe9881bd93a13cfc59ebbe"
  _type = "rgmc_manipulation/ParallelSpinPadsGripperCommandResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# RESULT
float64 par_final_position  # The final parallel gripper gap size (in meters)
float64 par_final_effort    # The final parallel gripper effort exerted (motor current)
bool par_stalled      # True iff the gripper is exerting max effort and not moving
bool par_reached_goal # True iff the gripper position has reached the commanded setpoint
float64[] pads_final_position # The final fingertip pads angular position (in radians)
float64[] pads_final_effort   # The final fingertip pads effort (in mA)
bool pads_stalled      # True iff one of the pads is exerting max effort and not moving
bool pads_reached_goal # True iff both pads reached goal position
"""
  __slots__ = ['par_final_position','par_final_effort','par_stalled','par_reached_goal','pads_final_position','pads_final_effort','pads_stalled','pads_reached_goal']
  _slot_types = ['float64','float64','bool','bool','float64[]','float64[]','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       par_final_position,par_final_effort,par_stalled,par_reached_goal,pads_final_position,pads_final_effort,pads_stalled,pads_reached_goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ParallelSpinPadsGripperCommandResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.par_final_position is None:
        self.par_final_position = 0.
      if self.par_final_effort is None:
        self.par_final_effort = 0.
      if self.par_stalled is None:
        self.par_stalled = False
      if self.par_reached_goal is None:
        self.par_reached_goal = False
      if self.pads_final_position is None:
        self.pads_final_position = []
      if self.pads_final_effort is None:
        self.pads_final_effort = []
      if self.pads_stalled is None:
        self.pads_stalled = False
      if self.pads_reached_goal is None:
        self.pads_reached_goal = False
    else:
      self.par_final_position = 0.
      self.par_final_effort = 0.
      self.par_stalled = False
      self.par_reached_goal = False
      self.pads_final_position = []
      self.pads_final_effort = []
      self.pads_stalled = False
      self.pads_reached_goal = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d2B().pack(_x.par_final_position, _x.par_final_effort, _x.par_stalled, _x.par_reached_goal))
      length = len(self.pads_final_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.pads_final_position))
      length = len(self.pads_final_effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.pads_final_effort))
      _x = self
      buff.write(_get_struct_2B().pack(_x.pads_stalled, _x.pads_reached_goal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.par_final_position, _x.par_final_effort, _x.par_stalled, _x.par_reached_goal,) = _get_struct_2d2B().unpack(str[start:end])
      self.par_stalled = bool(self.par_stalled)
      self.par_reached_goal = bool(self.par_reached_goal)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pads_final_position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pads_final_effort = s.unpack(str[start:end])
      _x = self
      start = end
      end += 2
      (_x.pads_stalled, _x.pads_reached_goal,) = _get_struct_2B().unpack(str[start:end])
      self.pads_stalled = bool(self.pads_stalled)
      self.pads_reached_goal = bool(self.pads_reached_goal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d2B().pack(_x.par_final_position, _x.par_final_effort, _x.par_stalled, _x.par_reached_goal))
      length = len(self.pads_final_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.pads_final_position.tostring())
      length = len(self.pads_final_effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.pads_final_effort.tostring())
      _x = self
      buff.write(_get_struct_2B().pack(_x.pads_stalled, _x.pads_reached_goal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.par_final_position, _x.par_final_effort, _x.par_stalled, _x.par_reached_goal,) = _get_struct_2d2B().unpack(str[start:end])
      self.par_stalled = bool(self.par_stalled)
      self.par_reached_goal = bool(self.par_reached_goal)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pads_final_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pads_final_effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 2
      (_x.pads_stalled, _x.pads_reached_goal,) = _get_struct_2B().unpack(str[start:end])
      self.pads_stalled = bool(self.pads_stalled)
      self.pads_reached_goal = bool(self.pads_reached_goal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2d2B = None
def _get_struct_2d2B():
    global _struct_2d2B
    if _struct_2d2B is None:
        _struct_2d2B = struct.Struct("<2d2B")
    return _struct_2d2B
