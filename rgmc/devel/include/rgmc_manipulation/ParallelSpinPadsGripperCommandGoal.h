// Generated by gencpp from file rgmc_manipulation/ParallelSpinPadsGripperCommandGoal.msg
// DO NOT EDIT!


#ifndef RGMC_MANIPULATION_MESSAGE_PARALLELSPINPADSGRIPPERCOMMANDGOAL_H
#define RGMC_MANIPULATION_MESSAGE_PARALLELSPINPADSGRIPPERCOMMANDGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rgmc_manipulation
{
template <class ContainerAllocator>
struct ParallelSpinPadsGripperCommandGoal_
{
  typedef ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> Type;

  ParallelSpinPadsGripperCommandGoal_()
    : par_target_pos(0.0)
    , par_max_effort(0.0)
    , par_velocity(0.0)
    , actuate_parallel(false)
    , pads_target_pos(0.0)
    , pads_max_effort(0.0)
    , pads_velocity(0.0)
    , actuate_pads(false)
    , reverse_pads_actuation(false)  {
    }
  ParallelSpinPadsGripperCommandGoal_(const ContainerAllocator& _alloc)
    : par_target_pos(0.0)
    , par_max_effort(0.0)
    , par_velocity(0.0)
    , actuate_parallel(false)
    , pads_target_pos(0.0)
    , pads_max_effort(0.0)
    , pads_velocity(0.0)
    , actuate_pads(false)
    , reverse_pads_actuation(false)  {
  (void)_alloc;
    }



   typedef double _par_target_pos_type;
  _par_target_pos_type par_target_pos;

   typedef double _par_max_effort_type;
  _par_max_effort_type par_max_effort;

   typedef double _par_velocity_type;
  _par_velocity_type par_velocity;

   typedef uint8_t _actuate_parallel_type;
  _actuate_parallel_type actuate_parallel;

   typedef double _pads_target_pos_type;
  _pads_target_pos_type pads_target_pos;

   typedef double _pads_max_effort_type;
  _pads_max_effort_type pads_max_effort;

   typedef double _pads_velocity_type;
  _pads_velocity_type pads_velocity;

   typedef uint8_t _actuate_pads_type;
  _actuate_pads_type actuate_pads;

   typedef uint8_t _reverse_pads_actuation_type;
  _reverse_pads_actuation_type reverse_pads_actuation;





  typedef boost::shared_ptr< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ParallelSpinPadsGripperCommandGoal_

typedef ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<std::allocator<void> > ParallelSpinPadsGripperCommandGoal;

typedef boost::shared_ptr< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal > ParallelSpinPadsGripperCommandGoalPtr;
typedef boost::shared_ptr< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal const> ParallelSpinPadsGripperCommandGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator1> & lhs, const ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator2> & rhs)
{
  return lhs.par_target_pos == rhs.par_target_pos &&
    lhs.par_max_effort == rhs.par_max_effort &&
    lhs.par_velocity == rhs.par_velocity &&
    lhs.actuate_parallel == rhs.actuate_parallel &&
    lhs.pads_target_pos == rhs.pads_target_pos &&
    lhs.pads_max_effort == rhs.pads_max_effort &&
    lhs.pads_velocity == rhs.pads_velocity &&
    lhs.actuate_pads == rhs.actuate_pads &&
    lhs.reverse_pads_actuation == rhs.reverse_pads_actuation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator1> & lhs, const ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rgmc_manipulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb68d13aae1dc06acb5bf6743e7c751f";
  }

  static const char* value(const ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb68d13aae1dc06aULL;
  static const uint64_t static_value2 = 0xcb5bf6743e7c751fULL;
};

template<class ContainerAllocator>
struct DataType< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rgmc_manipulation/ParallelSpinPadsGripperCommandGoal";
  }

  static const char* value(const ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# When performing an action that uses the parallel jaw and the pads at the same time,\n"
"# The parallel jaw one will be done first.\n"
"# GOAL\n"
"float64 par_target_pos  # Parallel gripper target aperture (in meters)\n"
"float64 par_max_effort  # Parallel gripper motor max motor current\n"
"float64 par_velocity    # Parallel gripper motor velocity\n"
"bool actuate_parallel   # Whether to actuate the parallel gripper or not\n"
"float64 pads_target_pos # Fingertip pads target angular position (in radians)\n"
"float64 pads_max_effort # Fingertip pads motor max current (in mA)\n"
"float64 pads_velocity   # Fingertip pads motor target velocity\n"
"bool actuate_pads       # Whether to actuate the rotary pads or not\n"
"bool reverse_pads_actuation       # Actuate rotary pads in reverse\n"
;
  }

  static const char* value(const ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.par_target_pos);
      stream.next(m.par_max_effort);
      stream.next(m.par_velocity);
      stream.next(m.actuate_parallel);
      stream.next(m.pads_target_pos);
      stream.next(m.pads_max_effort);
      stream.next(m.pads_velocity);
      stream.next(m.actuate_pads);
      stream.next(m.reverse_pads_actuation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParallelSpinPadsGripperCommandGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rgmc_manipulation::ParallelSpinPadsGripperCommandGoal_<ContainerAllocator>& v)
  {
    s << indent << "par_target_pos: ";
    Printer<double>::stream(s, indent + "  ", v.par_target_pos);
    s << indent << "par_max_effort: ";
    Printer<double>::stream(s, indent + "  ", v.par_max_effort);
    s << indent << "par_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.par_velocity);
    s << indent << "actuate_parallel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.actuate_parallel);
    s << indent << "pads_target_pos: ";
    Printer<double>::stream(s, indent + "  ", v.pads_target_pos);
    s << indent << "pads_max_effort: ";
    Printer<double>::stream(s, indent + "  ", v.pads_max_effort);
    s << indent << "pads_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.pads_velocity);
    s << indent << "actuate_pads: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.actuate_pads);
    s << indent << "reverse_pads_actuation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse_pads_actuation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RGMC_MANIPULATION_MESSAGE_PARALLELSPINPADSGRIPPERCOMMANDGOAL_H
