// Generated by gencpp from file ndx_manipulation/TFGCommandGoal.msg
// DO NOT EDIT!


#ifndef NDX_MANIPULATION_MESSAGE_TFGCOMMANDGOAL_H
#define NDX_MANIPULATION_MESSAGE_TFGCOMMANDGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ndx_manipulation
{
template <class ContainerAllocator>
struct TFGCommandGoal_
{
  typedef TFGCommandGoal_<ContainerAllocator> Type;

  TFGCommandGoal_()
    : grasp(0.0)
    , finger_angle(0.0)
    , is_deg(false)
    , max_effort(0.0)
    , velocity(0.0)  {
    }
  TFGCommandGoal_(const ContainerAllocator& _alloc)
    : grasp(0.0)
    , finger_angle(0.0)
    , is_deg(false)
    , max_effort(0.0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef double _grasp_type;
  _grasp_type grasp;

   typedef double _finger_angle_type;
  _finger_angle_type finger_angle;

   typedef uint8_t _is_deg_type;
  _is_deg_type is_deg;

   typedef double _max_effort_type;
  _max_effort_type max_effort;

   typedef double _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> const> ConstPtr;

}; // struct TFGCommandGoal_

typedef ::ndx_manipulation::TFGCommandGoal_<std::allocator<void> > TFGCommandGoal;

typedef boost::shared_ptr< ::ndx_manipulation::TFGCommandGoal > TFGCommandGoalPtr;
typedef boost::shared_ptr< ::ndx_manipulation::TFGCommandGoal const> TFGCommandGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator1> & lhs, const ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator2> & rhs)
{
  return lhs.grasp == rhs.grasp &&
    lhs.finger_angle == rhs.finger_angle &&
    lhs.is_deg == rhs.is_deg &&
    lhs.max_effort == rhs.max_effort &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator1> & lhs, const ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ndx_manipulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "007cdeef6577eba1ad468b75850b155c";
  }

  static const char* value(const ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x007cdeef6577eba1ULL;
  static const uint64_t static_value2 = 0xad468b75850b155cULL;
};

template<class ContainerAllocator>
struct DataType< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ndx_manipulation/TFGCommandGoal";
  }

  static const char* value(const ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"float64 grasp           # Gripper open or close\n"
"float64 finger_angle    # Angle between finger 2 and finger 3\n"
"bool is_deg             # Specify if Angle is in degrees\n"
"float64 max_effort      # Max motor current\n"
"float64 velocity        # Motor velocity\n"
;
  }

  static const char* value(const ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grasp);
      stream.next(m.finger_angle);
      stream.next(m.is_deg);
      stream.next(m.max_effort);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TFGCommandGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ndx_manipulation::TFGCommandGoal_<ContainerAllocator>& v)
  {
    s << indent << "grasp: ";
    Printer<double>::stream(s, indent + "  ", v.grasp);
    s << indent << "finger_angle: ";
    Printer<double>::stream(s, indent + "  ", v.finger_angle);
    s << indent << "is_deg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_deg);
    s << indent << "max_effort: ";
    Printer<double>::stream(s, indent + "  ", v.max_effort);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NDX_MANIPULATION_MESSAGE_TFGCOMMANDGOAL_H
