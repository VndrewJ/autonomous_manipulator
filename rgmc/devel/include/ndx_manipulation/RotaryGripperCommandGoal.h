// Generated by gencpp from file ndx_manipulation/RotaryGripperCommandGoal.msg
// DO NOT EDIT!


#ifndef NDX_MANIPULATION_MESSAGE_ROTARYGRIPPERCOMMANDGOAL_H
#define NDX_MANIPULATION_MESSAGE_ROTARYGRIPPERCOMMANDGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ndx_manipulation
{
template <class ContainerAllocator>
struct RotaryGripperCommandGoal_
{
  typedef RotaryGripperCommandGoal_<ContainerAllocator> Type;

  RotaryGripperCommandGoal_()
    : type()
    , offset(0)
    , effort(0)  {
    }
  RotaryGripperCommandGoal_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , offset(0)
    , effort(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef int32_t _offset_type;
  _offset_type offset;

   typedef int32_t _effort_type;
  _effort_type effort;





  typedef boost::shared_ptr< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> const> ConstPtr;

}; // struct RotaryGripperCommandGoal_

typedef ::ndx_manipulation::RotaryGripperCommandGoal_<std::allocator<void> > RotaryGripperCommandGoal;

typedef boost::shared_ptr< ::ndx_manipulation::RotaryGripperCommandGoal > RotaryGripperCommandGoalPtr;
typedef boost::shared_ptr< ::ndx_manipulation::RotaryGripperCommandGoal const> RotaryGripperCommandGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator1> & lhs, const ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.offset == rhs.offset &&
    lhs.effort == rhs.effort;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator1> & lhs, const ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ndx_manipulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "368af3338434120067228a0799903707";
  }

  static const char* value(const ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x368af33384341200ULL;
  static const uint64_t static_value2 = 0x67228a0799903707ULL;
};

template<class ContainerAllocator>
struct DataType< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ndx_manipulation/RotaryGripperCommandGoal";
  }

  static const char* value(const ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"string type       # Can be 'open', 'close' or ''. If 'open' or 'close', clutch is engaged.\n"
"int32 offset      # Rotation offset. If positive, rotation is clockwise.\n"
"int32 effort      # Max motor current\n"
;
  }

  static const char* value(const ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.offset);
      stream.next(m.effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RotaryGripperCommandGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ndx_manipulation::RotaryGripperCommandGoal_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "offset: ";
    Printer<int32_t>::stream(s, indent + "  ", v.offset);
    s << indent << "effort: ";
    Printer<int32_t>::stream(s, indent + "  ", v.effort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NDX_MANIPULATION_MESSAGE_ROTARYGRIPPERCOMMANDGOAL_H
